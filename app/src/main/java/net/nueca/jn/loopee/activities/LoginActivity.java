package net.nueca.jn.loopee.activities;import android.animation.Animator;import android.animation.AnimatorListenerAdapter;import android.annotation.TargetApi;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.graphics.Paint;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.AsyncTask;import android.os.Build;import android.os.Bundle;import android.text.TextUtils;import android.text.util.Linkify;import android.util.Base64;import android.util.Log;import android.view.KeyEvent;import android.view.View;import android.view.inputmethod.EditorInfo;import android.widget.Button;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import com.android.volley.AuthFailureError;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.VolleyLog;import com.android.volley.toolbox.JsonArrayRequest;import com.android.volley.toolbox.JsonObjectRequest;import com.android.volley.toolbox.StringRequest;import net.nueca.jn.loopee.constants.Constants;import net.nueca.jn.loopee.controllers.RequestManager;import net.nueca.jn.loopee.database.DatabaseManager;import net.nueca.jn.loopee.models.Branch_Prices;import net.nueca.jn.loopee.models.Branches;import net.nueca.jn.loopee.models.Customers;import net.nueca.jn.loopee.models.Product_Branch_Prices;import net.nueca.jn.loopee.models.Product_Tax_Rates;import net.nueca.jn.loopee.models.Products;import net.nueca.jn.loopee.models.Session;import net.nueca.jn.loopee.models.Settings;import net.nueca.jn.loopee.models.Tax_Rates;import net.nueca.jn.loopee.models.Tax_Settings;import net.nueca.jn.loopee.models.Users;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.HashMap;import java.util.Map;public class LoginActivity extends Activity {    public int currentPage, totalPage, productCount, branchesCount, customersCount;    public int remainingRow, rows;    private EditText emailTextView, passwordTextView, accountIdTextView;    private View loginFormView, progressView;    private TextView tryItNowTextView, progressText;    private Session session;    private ArrayList<Session> sessionList;    private Users users;    private ArrayList<Users> usersList;    private Settings settings;    private ArrayList<Settings> settingList;    private Branches branches;    private ArrayList<Branches> branchesList;    private Tax_Settings tax_settings;    private ArrayList<Tax_Settings> tax_settingsList;    private Tax_Rates tax_rates;    private ArrayList<Tax_Rates> tax_ratesList;    private Products products;    private ArrayList<Products> productsList;    private Customers customers;    private ArrayList<Customers> customersList;    private Product_Tax_Rates product_tax_rates;    private ArrayList<Product_Tax_Rates> product_tax_ratesList;    private Branch_Prices branch_prices;    private ArrayList<Branch_Prices> branch_priceList;    private Product_Branch_Prices product_branch_prices;    private ArrayList<Product_Branch_Prices> product_branch_pricesList;    private Boolean savingToDatabase = false;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        DatabaseManager.init(this);        // Instance of session        session = new Session();        sessionList = new ArrayList<>();        settings = new Settings();        settingList = new ArrayList<>();        users = new Users();        usersList = new ArrayList<>();        branches = new Branches();        branchesList = new ArrayList<>();        tax_settings = new Tax_Settings();        tax_settingsList = new ArrayList<>();        tax_rates = new Tax_Rates();        tax_ratesList = new ArrayList<>();        products = new Products();        productsList = new ArrayList<>();        customers = new Customers();        customersList = new ArrayList<>();        product_tax_rates = new Product_Tax_Rates();        product_tax_ratesList = new ArrayList<>();        branch_prices = new Branch_Prices();        branch_priceList = new ArrayList<>();        product_branch_prices = new Product_Branch_Prices();        product_branch_pricesList = new ArrayList<>();        //Pages        currentPage = 0;        totalPage = 0;        // Count        productCount = 0;        branchesCount = 0;        customersCount = 0;        //        // Set the layout        setContentView(R.layout.loopee_login);        // Get the Ids        accountIdTextView = (EditText) findViewById(R.id.account_id);        emailTextView = (EditText) findViewById(R.id.email);        passwordTextView = (EditText) findViewById(R.id.password);        // Listener when the user inputs password        passwordTextView.setOnEditorActionListener(new TextView.OnEditorActionListener() {            @Override            public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) {                if (id == EditorInfo.IME_NULL) {                    onLoginClicked();                    return true;                }                return false;            }        });        Button loginButton = (Button) findViewById(R.id.sign_in_button);        loginButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                onLoginClicked();            }        });        loginFormView = findViewById(R.id.login_form);        progressView = findViewById(R.id.login_progress);        progressText = (TextView) findViewById(R.id.login_text_progress);        //adding underline and link to try it now textview        tryItNowTextView = (TextView) findViewById(R.id.try_it_now);        tryItNowTextView.setPaintFlags(tryItNowTextView.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);        Linkify.addLinks(tryItNowTextView, Linkify.ALL);        tryItNowTextView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Log.i("LoginActivity", "Try it now.");                accountIdTextView.setText("easyrestaurant");                emailTextView.setText("nuecapos@nueca.net");                passwordTextView.setText("3@syR3$");                initLogin();            }        });    }    private void onLoginClicked() {        if (!isNetworkOn(getBaseContext())) {            Toast.makeText(getBaseContext(),                    "No network connection", Toast.LENGTH_SHORT).show();        } else {            initLogin();        }    }    public boolean isNetworkOn(Context context) {        ConnectivityManager connMgr =                (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();        return (networkInfo != null && networkInfo.isConnected());    }    /**     * Validate Login form and authenticate.     */    private void initLogin() {        accountIdTextView.setError(null);        emailTextView.setError(null);        passwordTextView.setError(null);        String accountId = accountIdTextView.getText().toString();        String email = emailTextView.getText().toString();        String password = passwordTextView.getText().toString();        boolean cancelLogin = false;        View focusView = null;        if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {            passwordTextView.setError(getString(R.string.invalid_password));            focusView = passwordTextView;            cancelLogin = true;        }        if (TextUtils.isEmpty(accountId)) {            accountIdTextView.setError(getString(R.string.field_required));            focusView = accountIdTextView;            cancelLogin = true;        } else if (TextUtils.isEmpty(email)) {            emailTextView.setError(getString(R.string.field_required));            focusView = emailTextView;            cancelLogin = true;        } else if (!isEmailValid(email)) {            emailTextView.setError(getString(R.string.invalid_email));            focusView = emailTextView;            cancelLogin = true;        }        if (cancelLogin) {            // error in login            focusView.requestFocus();        } else {            // show progress spinner, and start background task to login            showProgress(true);            // Login user            Login();        }    }    public void Login() {        progressText.setText("Please don't move... ");        getURL();    }    public void getURL() {        StringRequest req = new StringRequest(Constants.URL_API_IMONGGO + accountIdTextView.getText().toString(), new Response.Listener<String>() {            @Override            public void onResponse(String response) {                Log.i("success", "Succesfully Retrieved the URL");                // save the data to session object                session.setAccount_id(accountIdTextView.getText().toString());                session.setUrl(response);                // after getting the URL get the token                progressText.setText("Spinning up the hamsters...");                getToken();            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                showProgress(false);                Toast.makeText(getBaseContext(), "Something went wrong, Please check your account id ", Toast.LENGTH_SHORT).show();                Log.i("error", error.toString());            }        });        RequestManager.getInstance().doRequest().addToRequestQueue(req);    }    private void getToken() {        String token_URL = session.getUrl() + "/api/tokens.json?" + "email=" + emailTextView.getText().toString() + "&password=" + passwordTextView.getText().toString();        JsonObjectRequest req = new JsonObjectRequest(token_URL, null,                new Response.Listener<JSONObject>() {                    @Override                    public void onResponse(JSONObject response) {                        try {                            Log.i("success", "Succesfully Retrieved the Token");                            // get the token                            String userTOKEN = response.get("api_token").toString();                            // set the Email and Password to session                            session.setEmail(emailTextView.getText().toString());                            session.setPassword(passwordTextView.getText().toString());                            // set the Token to session                            session.setToken(userTOKEN);                            // get the other data                            progressText.setText("Shovelling coal to the server...");                            getSettings();                        } catch (JSONException e) {                            Log.i("request", e.toString());                        }                    }                }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                Log.i("request", error.toString());                showProgress(false);                Toast.makeText(getBaseContext(), "Something went wrong, Please check your email or password", Toast.LENGTH_SHORT).show();            }        });        // add the request object to the queue to be executed        RequestManager.getInstance().doRequest().addToRequestQueue(req);    }    private void getSettings() {        String settingsURL = "https://" + session.getToken() + ":x@" + session.getUrl().replace("https://", "") + "/api/settings.json";        JsonArrayRequest settingsRequest = new JsonArrayRequest(settingsURL,                new Response.Listener<JSONArray>() {                    @Override                    public void onResponse(JSONArray jsonArray) {                        Log.i("success", "Succesfully Retrieved the Settings");                        session.setSettings_count(jsonArray.length());                        try {                            if (jsonArray.length() != 0) {                                for (int i = 0; i < jsonArray.length(); i++) {                                    JSONObject settingsList = jsonArray.getJSONObject(i);                                    // set the data to object and save it to database                                    settings = new Settings(i, settingsList.getString("name"), settingsList.getString("value"));                                    settingList.add(settings);                                }                            }                            // initialize the url                            String branchesURL = "https://" + session.getToken() + ":x@" + session.getUrl().replace("https://", "") + "/api/branches.json";                            String getBranchesCount = "?q=count";                            // get the other data                            progressText.setText("Preparing the kitchen...");                            getBranchesCount(branchesURL + getBranchesCount);                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                showProgress(false);                VolleyLog.e("Error: ", error.toString());                Toast.makeText(getBaseContext(), "Failed to get Settings Data, " + error.getMessage(), Toast.LENGTH_SHORT).show();            }        }) {            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                HashMap<String, String> headers = new HashMap<>();                String creds = String.format("%s:%s", session.getToken(), "x");                String auth = "Basic " + Base64.encodeToString(creds.getBytes(), Base64.DEFAULT);                headers.put("Authorization", auth);                return headers;            }        };        RequestManager.getInstance().doRequest().addToRequestQueue(settingsRequest);    }    private void getBranchesCount(String branchesCountURL) {        JsonObjectRequest req = new JsonObjectRequest(branchesCountURL, null,                new Response.Listener<JSONObject>() {                    @Override                    public void onResponse(JSONObject response) {                        try {                            // get the count from the object                            branchesCount = response.getInt("count");                            // save it to the session                            session.setBranches_count(branchesCount);                            String branchCount = String.valueOf(response.get("count"));                            Double pCount = Double.parseDouble(branchCount);                            int page = (int) Math.ceil(pCount / 50);                            totalPage = page;                            // initialize the URL for Branches                            String urlStart = "https://" + session.getToken() + ":x@" + session.getUrl().replace("https://", "") + "/api/branches.json?after=&page=";                            currentPage = 0;                            // loop through the pages of Branches                            for (int i = 1; i <= page; i++) {                                getBranches(urlStart + i);                            }                        } catch (JSONException e) {                            Log.i("request", e.toString());                        }                    }                }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                showProgress(false);                VolleyLog.e("Error: ", error.toString());                Toast.makeText(getBaseContext(), "Failed to get Branches Data, " + error.getMessage(), Toast.LENGTH_SHORT).show();            }        }) {            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                HashMap<String, String> headers = new HashMap<>();                String creds = String.format("%s:%s", session.getToken(), "x");                String auth = "Basic " + Base64.encodeToString(creds.getBytes(), Base64.DEFAULT);                headers.put("Authorization", auth);                return headers;            }        };        // add the request object to the queue to be executed        RequestManager.getInstance().doRequest().addToRequestQueue(req);    }    private void getBranches(String branchesURL) {        JsonArrayRequest req = new JsonArrayRequest(branchesURL, new Response.Listener<JSONArray>() {            @Override            public void onResponse(JSONArray jsonArray) {                Log.i("success", "Succesfully Retrieve the Branches");                try {                    currentPage++;                    for (int i = 0; i < session.getBranches_count(); i++) {                        // loop through the Array of  branches                        JSONObject branchList = jsonArray.getJSONObject(i);                        branches = new Branches(                                branchList.getInt("id"),                                branchList.getString("name"),                                branchList.getString("street"),                                branchList.getString("city"),                                branchList.getString("state"),                                branchList.getString("country"),                                branchList.getString("zipcode"),                                branchList.getString("tin"),                                branchList.getString("site_type"),                                branchList.getInt("subscription_type"),                                branchList.getString("utc_created_at"),                                branchList.getString("utc_updated_at"),                                branchList.getString("status"));                        branchesList.add(branches);                    }                    // if we reach the end of the page                    if (currentPage == totalPage) {                        // initialize the URL for Tax Settings                        String tax_settingsURL = "https://" + session.getToken() + ":x@" + session.getUrl().replace("https://", "") + "/api/tax_settings.json";                        // get the other data                        progressText.setText("Checking upgraded equipments...");                        getTaxSettings(tax_settingsURL);                    }                } catch (JSONException e) {                    e.printStackTrace();                }            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                showProgress(false);                VolleyLog.e("Error: ", error.toString());                Toast.makeText(getBaseContext(), "Failed to get Branches Data, " + error.getMessage(), Toast.LENGTH_SHORT).show();            }        }) {            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                HashMap<String, String> headers = new HashMap<>();                String creds = String.format("%s:%s", session.getToken(), "x");                String auth = "Basic " + Base64.encodeToString(creds.getBytes(), Base64.DEFAULT);                headers.put("Authorization", auth);                return headers;            }        };        // add the request object to the queue to be executed        RequestManager.getInstance().doRequest().addToRequestQueue(req);    }    public void getTaxSettings(String taxSettingsURL) {        JsonObjectRequest taxRateRequest = new JsonObjectRequest(taxSettingsURL, null,                new Response.Listener<JSONObject>() {                    @Override                    public void onResponse(JSONObject taxSettingsObject) {                        Log.i("success", "Succesfully Retrieve the Tax Settings");                        try {                            tax_settings = new Tax_Settings(                                    taxSettingsObject.length(),                                    taxSettingsObject.getBoolean("compute_tax"),                                    taxSettingsObject.getBoolean("tax_inclusive"));                            tax_settingsList.add(tax_settings);                            // Get the JSONArray Tax Rates from Product JSONObject                            JSONArray taxRateArray = taxSettingsObject.getJSONArray("tax_rates");                            // if the Array has content                            if (taxRateArray.length() != 0) {                                for (int x = 0; x < taxRateArray.length(); x++) {                                    JSONObject taxRate = taxRateArray.getJSONObject(x);                                    // save the data to object                                    tax_rates = new Tax_Rates(                                            taxRate.getInt("id"),                                            taxRate.getString("branch_id"),                                            taxRate.getString("name"),                                            taxRate.getDouble("value"),                                            taxRate.getInt("tax_rate_type"),                                            taxRate.getString("status")                                    );                                    tax_ratesList.add(tax_rates);                                }                            }                            // get the other data                            progressText.setText("Preparing your store...");                            getUsers();                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                showProgress(false);                VolleyLog.e("Error: ", error.toString());                Toast.makeText(getBaseContext(), "Failed to get Tax Settings Data, " + error.getMessage(), Toast.LENGTH_SHORT).show();            }        }) {            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                HashMap<String, String> headers = new HashMap<>();                String creds = String.format("%s:%s", session.getToken(), "x");                String auth = "Basic " + Base64.encodeToString(creds.getBytes(), Base64.DEFAULT);                headers.put("Authorization", auth);                return headers;            }        };        // add the request object to the queue to be executed        RequestManager.getInstance().doRequest().addToRequestQueue(taxRateRequest);    }    private void getUsers() {        String usersURL = "https://" + session.getToken() + ":x@" + session.getUrl().replace("https://", "") + "/api/users.json";        JsonArrayRequest req = new JsonArrayRequest(usersURL, new Response.Listener<JSONArray>() {            @Override            public void onResponse(JSONArray userJsonArray) {                try {                    Log.i("Success!", "Successfully Retrieved the Users");                    session.setUser_Count(userJsonArray.length());                    for (int i = 0; i < userJsonArray.length(); i++) {                        // loop through the Array of  products                        JSONObject userList = userJsonArray.getJSONObject(i);                        // if user has values                        if (userList.length() != 0) {                            // put products to list                            users = new Users(                                    userList.getString("email"),                                    userList.getInt("id"),                                    userList.getString("name"),                                    userList.getInt("home_branch_id"),                                    userList.getString("role_code"),                                    userList.getString("utc_created_at"),                                    userList.getString("utc_updated_at"),                                    userList.getString("status"));                            // add objects to array list                            usersList.add(users);                            if (userList.getInt("role_id") == 4) {                                session.setName(userList.getString("name"));                                session.setRole_id(userList.getString("role_id"));                                session.setRole_code(userList.getString("role_code"));                            }                        }                    }                    // initialize the url for product                    String productsURL = "https://" + session.getToken() + ":x@" + session.getUrl().replace("https://", "") + "/api/products.json";                    String getProductCountURL = "?q=count&active_only=1";                    progressText.setText("Warming up the waiters...");                    getProductCount(productsURL + getProductCountURL);                } catch (JSONException e) {                    e.printStackTrace();                }            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                showProgress(false);                VolleyLog.e("Error: ", error.toString());                Toast.makeText(getBaseContext(), "Failed to get Users Data, " + error.getMessage(), Toast.LENGTH_SHORT).show();            }        }) {            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                HashMap<String, String> headers = new HashMap<>();                String creds = String.format("%s:%s", session.getToken(), "x");                String auth = "Basic " + Base64.encodeToString(creds.getBytes(), Base64.DEFAULT);                headers.put("Authorization", auth);                return headers;            }        };        // add the request object to the queue to be executed        RequestManager.getInstance().doRequest().addToRequestQueue(req);    }    public void getProductCount(String productCountURL) {        JsonObjectRequest req = new JsonObjectRequest(productCountURL, null,                new Response.Listener<JSONObject>() {                    @Override                    public void onResponse(JSONObject response) {                        try {                            productCount = response.getInt("count");                            session.setProduct_count(productCount);                            String prodCount = String.valueOf(response.get("count"));                            Double pCount = Double.parseDouble(prodCount);                            int page = (int) Math.ceil(pCount / 50);                            totalPage = page;                            String urlStart = "https://" + session.getToken() + ":x@" + session.getUrl().replace("https://", "") + "/api/products.json?after=&page=";                            String urlEnd = "&active_only=1";                            currentPage = 0;                            remainingRow = session.getProduct_count();                            for (int i = 1; i <= totalPage; i++) {                                getProducts(urlStart + i + urlEnd);                            }                        } catch (JSONException e) {                            Log.i("request", e.toString());                        }                    }                }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                showProgress(false);                Toast.makeText(getBaseContext(), "Something went wrong.", Toast.LENGTH_SHORT).show();            }        }) {            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                HashMap<String, String> headers = new HashMap<>();                String creds = String.format("%s:%s", session.getToken(), "x");                String auth = "Basic " + Base64.encodeToString(creds.getBytes(), Base64.DEFAULT);                headers.put("Authorization", auth);                return headers;            }        };        // add the request object to the queue to be executed        RequestManager.getInstance().doRequest().addToRequestQueue(req);    }    public void getProducts(String URLs) {        JsonArrayRequest req = new JsonArrayRequest(URLs, new Response.Listener<JSONArray>() {            @Override            public void onResponse(JSONArray jsonArray) {                try {                    Log.i("success", "Succesfully Retrieve the Products");                    currentPage++;                    if (remainingRow >= 50) {                        rows = 50;                    } else if (remainingRow <= 0) {                        rows = session.getProduct_count();                    } else {                        rows = remainingRow;                    }                    Log.i("rows-products", String.valueOf(remainingRow));                    for (int i = 0; i < rows; i++) {                        // loop through the Array of  products                        JSONObject productList = jsonArray.getJSONObject(i);                        String thumbnail = productList.getString("thumbnail_url");                        String[] separated = thumbnail.split("/");                        String thumbnal_url = separated[3];                        String image_products_url = "https://" + session.getToken() + ":x@" + session.getUrl().replace("https://", "") + "/api/products/" + thumbnal_url + ".jpg?size=large";                        // put products to list                        products = new Products(                                productList.getInt("id"),                                productList.getString("name"),                                productList.getString("stock_no"),                                productList.getDouble("cost"),                                productList.getDouble("retail_price"),                                0, // wholesale price                                productList.getString("description"),                                productList.getBoolean("allow_decimal_quantities"),                                productList.getBoolean("disable_discount"),                                productList.getBoolean("disable_inventory"),                                productList.getBoolean("enable_open_price"),                                productList.getBoolean("tax_exempt"),                                productList.getString("tag_list"),                                productList.getString("barcode_list"),                                image_products_url,                                productList.getString("utc_created_at"),                                productList.getString("utc_updated_at"),                                productList.getString("status")                        );                        // Get the JSONArray Tax Rates from Product JSONObject                        JSONArray taxRateArray = productList.getJSONArray("tax_rates");                        // if the Array has content                        if (taxRateArray.length() != 0) {                            for (int x = 0; x < taxRateArray.length(); x++) {                                /**                                 * 'products' is the object that I will insert 1 or many tax rates                                 *                                 * 1.) I should get the tax rates object that match the taxRateList.getString("id")                                 *      Note: I'm inside the for loop here                                 *      Note: tax rates are located inside ArrayList<Tax_Rates> tax_ratesList                                 *                                 * 2.) put it in products_tax_rates                                 *      products                                 *          for loop                                 *              put tax rates inside product                                 *          end for loop                                 */                                // Get the JSONObject tax                                JSONObject tax_rate_object = taxRateArray.getJSONObject(x);                                for (Tax_Rates t_rates : tax_ratesList) {                                    if (t_rates.getId() == tax_rate_object.getInt("id")) {                                        Log.i("match", t_rates.getName());                                        // create product tax rates                                        product_tax_rates = new Product_Tax_Rates(products, t_rates);                                        // put it in ArrayList                                        product_tax_ratesList.add(product_tax_rates);                                    }                                }                            }                        }                        // Branch Price                        JSONArray branchPriceArray = productList.getJSONArray("branch_prices");                        // if the array has branch prices                        if (branchPriceArray.length() != 0) {                            for (int xx = 0; xx < branchPriceArray.length(); xx++) {                                JSONObject branch_price_object = branchPriceArray.getJSONObject(xx);                                // create branch prices                                branch_prices = new Branch_Prices(                                        branch_price_object.getInt("branch_id"),                                        branch_price_object.getDouble("retail_price"), 0.0,                                        branch_price_object.getString("utc_created_at"),                                        branch_price_object.getString("utc_updated_at"));                                // add the branch price to list                                branch_priceList.add(branch_prices);                                // create new product branch price                                product_branch_prices = new Product_Branch_Prices(products, branch_prices);                                product_branch_pricesList.add(product_branch_prices);                            }                        }                        remainingRow = remainingRow - 50;                        productsList.add(products);                    }                    if (currentPage == totalPage) {                        Log.i("pTaxRates", String.valueOf(product_tax_ratesList.size()));                        String customersURL = "https://" + session.getToken() + ":x@" + session.getUrl().replace("https://", "") + "/api/customers.json?q=count";                        progressText.setText("Pouring happiness into your life...");                        getCustomersCount(customersURL);                    }                } catch (JSONException e) {                    e.printStackTrace();                }            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                showProgress(false);                Toast.makeText(getBaseContext(), "Something went wrong", Toast.LENGTH_SHORT).show();            }        }) {            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                HashMap<String, String> headers = new HashMap<>();                String creds = String.format("%s:%s", session.getToken(), "x");                String auth = "Basic " + Base64.encodeToString(creds.getBytes(), Base64.DEFAULT);                headers.put("Authorization", auth);                return headers;            }        };        // add the request object to the queue to be executed        RequestManager.getInstance().doRequest().addToRequestQueue(req);    }    private void getCustomersCount(String customercountURL) {        JsonObjectRequest req = new JsonObjectRequest(customercountURL, null,                new Response.Listener<JSONObject>() {                    @Override                    public void onResponse(JSONObject response) {                        try {                            customersCount = response.getInt("count");                            session.setCustomers_count(customersCount);                            String customersCount = String.valueOf(response.get("count"));                            Double cCount = Double.parseDouble(customersCount);                            int page = (int) Math.ceil(cCount / 50);                            totalPage = page;                            String urlStart = "https://" + session.getToken() + ":x@" + session.getUrl().replace("https://", "") + "/api/customers.json?after=&page=";                            currentPage = 0;                            remainingRow = session.getCustomers_count();                            for (int i = 1; i <= totalPage; i++) {                                getCustomers(urlStart + i);                            }                        } catch (JSONException e) {                            Log.i("request", e.toString());                        }                    }                }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                showProgress(false);                Toast.makeText(getBaseContext(), "Something went wrong", Toast.LENGTH_SHORT).show();            }        }) {            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                HashMap<String, String> headers = new HashMap<>();                String creds = String.format("%s:%s", session.getToken(), "x");                String auth = "Basic " + Base64.encodeToString(creds.getBytes(), Base64.DEFAULT);                headers.put("Authorization", auth);                return headers;            }        };        // add the request object to the queue to be executed        RequestManager.getInstance().doRequest().addToRequestQueue(req);    }    private void getCustomers(String customersURL) {        JsonArrayRequest req = new JsonArrayRequest(customersURL, new Response.Listener<JSONArray>() {            @Override            public void onResponse(JSONArray jsonArray) {                //Log.i("success", "Succesfully Retrieve the Customers");                try {                    currentPage++;                    Log.i("pages", currentPage + "-" + totalPage);                    if (remainingRow >= 50) {                        rows = 50;                    } else if (remainingRow <= 0) {                        rows = session.getCustomers_count();                    } else {                        rows = remainingRow;                    }                    Log.i("rows-customers", String.valueOf(remainingRow));                    for (int i = 0; i < rows; i++) {                        // loop through the Array of  products                        JSONObject customerList = jsonArray.getJSONObject(i);                        customers = new Customers(                                customerList.getInt("id"),                                customerList.getString("code"),                                customerList.getString("alternate_code"),                                customerList.getString("first_name"),                                customerList.getString("last_name"),                                customerList.getString("name"),                                customerList.getString("company_name"),                                customerList.getString("tin"),                                customerList.getString("tax_exempt"),                                customerList.getString("street"),                                customerList.getString("city"),                                customerList.getString("state"),                                customerList.getString("zipcode"),                                customerList.getString("country"),                                customerList.getString("telephone"),                                customerList.getString("fax"),                                customerList.getString("mobile"),                                customerList.getString("email"),                                customerList.getString("remark"),                                customerList.getString("customer_type_id"),                                customerList.getString("customer_type_name"),                                customerList.getString("discount_text"),                                customerList.getString("available_points"),                                customerList.getString("birthdate"),                                customerList.getString("utc_created_at"),                                customerList.getString("utc_updated_at"),                                customerList.getString("status")                        );                        customersList.add(customers);                    }                    remainingRow = remainingRow - 50;                    if (currentPage == totalPage) {                        progressText.setText("I really like that smile on your face... ");                        saveDatastoDatabase();                    }                } catch (JSONException e) {                    e.printStackTrace();                }            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                showProgress(false);                Toast.makeText(getBaseContext(), "Something went wrong", Toast.LENGTH_SHORT).show();            }        }) {            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                HashMap<String, String> headers = new HashMap<>();                String creds = String.format("%s:%s", session.getToken(), "x");                String auth = "Basic " + Base64.encodeToString(creds.getBytes(), Base64.DEFAULT);                headers.put("Authorization", auth);                return headers;            }        };        // add the request object to the queue to be executed        RequestManager.getInstance().doRequest().addToRequestQueue(req);    }    private void saveDatastoDatabase() {        new saveDataFromImonggoToDatabase().execute("Start Now");    }    private class saveDataFromImonggoToDatabase extends AsyncTask<String, Integer, String> {        @Override        protected String doInBackground(String... params) {            // save the data to database            saveSessiontoDatabase(session);            Log.i("settings size", String.valueOf(settingList.size()));            if (settingList.size() != 0) {                for (int n = 0; n < settingList.size(); n++) {                    Settings settingsTemp = settingList.get(n);                    saveSettingstoDatabase(settingsTemp);                }            }            Log.i("branchlist size", String.valueOf(branchesList.size()));            // Save th ArrayList Branches            if (branchesList.size() != 0) {                for (int yy = 0; yy < branchesList.size(); yy++) {                    Branches branchTemp = branchesList.get(yy);                    //Log.i("branches",branchTemp.toString());                    saveBranchestoDatabase(branchTemp);                }            }            saveTax_SettingstoDatabase(tax_settings);            Log.i("tax rates size", String.valueOf(tax_ratesList.size()));            // Save the ArrayList Tax Rates            if (tax_ratesList.size() != 0) {                for (int y = 0; y < tax_ratesList.size(); y++) {                    Tax_Rates tax_ratesTemp = tax_ratesList.get(y);                    saveTax_RatestoDatabase(tax_ratesTemp);                }            }            Log.i("users size", String.valueOf(usersList.size()));            if (usersList.size() != 0) {                for (int m = 0; m < usersList.size(); m++) {                    Users usersTemp = usersList.get(m);                    saveUserstoDatabase(usersTemp);                }            }            Log.i("products size", String.valueOf(productsList.size()));            // Save the ArrayList Products            if (productsList.size() != 0) {                for (int z = 0; z < productsList.size(); z++) {                    Products productsTemp = productsList.get(z);                    saveProductstoDatabase(productsTemp);                }            }            Log.i("customers size", String.valueOf(customersList.size()));            // Save the ArrayList Customers            if (customersList.size() != 0) {                for (int x = 0; x < customersList.size(); x++) {                    Customers customersTemp = customersList.get(x);                    saveCustomerstoDatabase(customersTemp);                }            }            Log.i("product tax rate size: ", String.valueOf(product_tax_ratesList.size()));            // Save the Arraylist Products Tax rates            if (product_tax_ratesList.size() != 0) {                for (Product_Tax_Rates p : product_tax_ratesList) {                    saveProduct_Tax_RatestoDatabase(p);                }            }            Log.i("branchpricessize: ", String.valueOf(branch_priceList.size()));            if (branch_priceList.size() != 0) {                for (Branch_Prices bp : branch_priceList) {                    Log.i("branchprices : ", bp.toString());                }            }            Log.i("productbranchsize: ", String.valueOf(product_branch_pricesList.size()));            // Save the Arraylist Product Branch Prices            if (product_branch_pricesList.size() != 0) {                for (Product_Branch_Prices pb : product_branch_pricesList) {                    Log.i("product branch prices: ", pb.toString());                    saveProduct_Branch_PricestoDatabase(pb);                }            }            return "All done";        }        @Override        protected void onPostExecute(String result) {            super.onPostExecute(result);            startDashBoardActivity();        }    }    private void startDashBoardActivity() {        finish();        Intent intent = new Intent(getBaseContext(), DashboardActivity.class);        startActivity(intent);    }    private void saveProductstoDatabase(Products products) {        DatabaseManager.getInstance().addProduct(products);    }    private void saveBranchestoDatabase(Branches branches) {        DatabaseManager.getInstance().addBranches(branches);    }    private void saveUserstoDatabase(Users users) {        DatabaseManager.getInstance().addUser(users);    }    private void saveSessiontoDatabase(Session session) {        DatabaseManager.getInstance().addSession(session);    }    private void saveSettingstoDatabase(Settings settings) {        DatabaseManager.getInstance().addSettings(settings);    }    private void saveTax_SettingstoDatabase(Tax_Settings t) {        DatabaseManager.getInstance().addTax_Settings(t);    }    private void saveTax_RatestoDatabase(Tax_Rates tax_rates) {        DatabaseManager.getInstance().addTax_Rates(tax_rates);    }    private void saveProduct_Tax_RatestoDatabase(Product_Tax_Rates product_tax_rates) {        DatabaseManager.getInstance().addProductTax_Rates(product_tax_rates);    }    private void saveProduct_Branch_PricestoDatabase(Product_Branch_Prices product_branch_prices) {        DatabaseManager.getInstance().addProductBranch_Prices(product_branch_prices);    }    private void saveCustomerstoDatabase(Customers customers) {        DatabaseManager.getInstance().addCustomers(customers);    }    private boolean isEmailValid(String email) {        //add your own logic        return email.contains("@");    }    private boolean isPasswordValid(String password) {        //add your own logic        return password.length() >= 5;    }    /**     * Shows the progress UI and hides the login form.     */    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)    public void showProgress(final boolean show) {        // On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow        // for very easy animations. If available, use these APIs to fade-in        // the progress spinner.        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {            int shortAnimTime = getResources().getInteger(android.R.integer.config_shortAnimTime);            loginFormView.setVisibility(show ? View.GONE : View.VISIBLE);            tryItNowTextView.setVisibility(show ? View.GONE : View.VISIBLE);            loginFormView.animate().setDuration(shortAnimTime).alpha(                    show ? 0 : 1).setListener(new AnimatorListenerAdapter() {                @Override                public void onAnimationEnd(Animator animation) {                    loginFormView.setVisibility(show ? View.GONE : View.VISIBLE);                    tryItNowTextView.setVisibility(show ? View.GONE : View.VISIBLE);                }            });            progressView.setVisibility(show ? View.VISIBLE : View.GONE);            progressText.setVisibility(show ? View.VISIBLE : View.GONE);            progressView.animate().setDuration(shortAnimTime).alpha(                    show ? 1 : 0).setListener(new AnimatorListenerAdapter() {                @Override                public void onAnimationEnd(Animator animation) {                    progressView.setVisibility(show ? View.VISIBLE : View.GONE);                    progressText.setVisibility(show ? View.VISIBLE : View.GONE);                }            });        } else {            // The ViewPropertyAnimator APIs are not available, so simply show            // and hide the relevant UI components.            progressView.setVisibility(show ? View.VISIBLE : View.GONE);            progressText.setVisibility(show ? View.VISIBLE : View.GONE);            tryItNowTextView.setVisibility(show ? View.GONE : View.VISIBLE);            loginFormView.setVisibility(show ? View.GONE : View.VISIBLE);        }    }}